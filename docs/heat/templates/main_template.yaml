heat_template_version: 2021-04-16

description: |
  A template to create multiple environments with specific subnets and instances.

parameters:
  key_name:
    type: string
    label: Keypair Name
    description: Name of a KeyPair to enable SSH access to the instances.
    constraints:
      - custom_constraint: nova.keypair
  windows_2019_image:
    type: string
    label: Windows Server 2019 Image
    description: ID of the Windows Server 2019 image.
    constraints:
      - custom_constraint: glance.image
  debian_10_image:
    type: string
    label: Debian 10 Image
    description: ID of the Debian 10 image.
    constraints:
      - custom_constraint: glance.image
  ubuntu_18_image:
    type: string
    label: Ubuntu 18.04 Image
    description: ID of the Ubuntu 18.04 image.
    constraints:
      - custom_constraint: glance.image
  ubuntu_20_image:
    type: string
    label: Ubuntu 20.04 Desktop Image
    description: ID of the Ubuntu 20.04 Desktop image.
    constraints:
      - custom_constraint: glance.image
  splunk_image:
    type: string
    label: Splunk Image
    description: ID of the Splunk image.
    constraints:
      - custom_constraint: glance.image
  centos_7_image:
    type: string
    label: CentOS 7 Image
    description: ID of the CentOS 7 image.
    constraints:
      - custom_constraint: glance.image
  fedora_21_image:
    type: string
    label: Fedora 21 Image
    description: ID of the Fedora 21 image.
    constraints:
      - custom_constraint: glance.image
  public_net:
    type: string
    label: Public Network
    description: ID of the public network for internet access.
    constraints:
      - custom_constraint: neutron.network
  environment_count:
    type: number
    label: Number of Environments
    description: How many environments would you like to deploy?
    constraints:
      - range: { min: 1 }
    default: 1

resources:
  central_router:
    type: OS::Neutron::Router
    properties:
      name: central-router
      external_gateway_info:
        network: { get_param: public_net }

  central_router_interface_master:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: central_router }
      subnet_id: { get_resource: master_subnet }

  master_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      name: master-security-group
      rules:
        - direction: ingress
          ethertype: IPv4
          remote_ip_prefix: 10.0.0.0/8
        - direction: egress
          ethertype: IPv4

  master_network:
    type: OS::Neutron::Net
    properties:
      name: master-network

  master_subnet:
    type: OS::Neutron::Subnet
    properties:
      network_id: { get_resource: master_network }
      cidr: 10.0.0.0/24
      gateway_ip: 10.0.0.1
      allocation_pools:
        - start: 10.0.0.10
          end: 10.0.0.200
      dns_nameservers:
        - 1.1.1.1

  master_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: { get_param: public_net }

  master_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: { get_resource: master_router }
      subnet_id: { get_resource: master_subnet }

  master_instance:
    type: OS::Nova::Server
    properties:
      name: master-ubuntu
      image: { get_param: ubuntu_20_image }
      flavor: m1.medium
      key_name: { get_param: key_name }
      networks:
        - network: { get_resource: master_network }
      security_groups:
        - { get_resource: master_security_group }
      user_data_format: RAW
      user_data:
        str_replace:
          params:
            $environment_count: { get_param: environment_count }
          template: |
            #!/bin/bash
            set -e

            # Create ubuntu user with password ubuntu
            echo "ubuntu:ubuntu" | chpasswd
            usermod -aG sudo ubuntu

            # Start SSH
            systemctl start ssh

            # Update and install required packages
            apt-get update
            apt-get install -y ansible git

            # Clone the repository
            git clone https://github.com/CyberLions/red-blue-env.git /home/ubuntu/red-blue-env
            chown -R ubuntu:ubuntu /home/ubuntu/red-blue-env

            # Write environments information to a file
            echo "$environment_count" > /home/ubuntu/environment_count.txt

            # Create a script to run Ansible playbooks
            cat << EOF > /home/ubuntu/run_ansible.sh
            #!/bin/bash
            cd /home/ubuntu/red-blue-env
            ansible-playbook -i inventory.ini playbook.yml --extra-vars "@/home/ubuntu/environment_count.txt"
            EOF

            chmod +x /home/ubuntu/run_ansible.sh
            chown ubuntu:ubuntu /home/ubuntu/run_ansible.sh

            echo "Setup complete. Log in as ubuntu user and run ./run_ansible.sh to execute Ansible playbooks."

  environments:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: environment_count }
      resource_def:
        type: https://github.com/CyberLions/red-blue-env/raw/refs/heads/main/docs/heat/templates/environment_template.yaml
        properties:
          environment_index: "%index%"
          key_name: { get_param: key_name }
          windows_2019_image: { get_param: windows_2019_image }
          debian_10_image: { get_param: debian_10_image }
          ubuntu_18_image: { get_param: ubuntu_18_image }
          ubuntu_20_image: { get_param: ubuntu_20_image }
          splunk_image: { get_param: splunk_image }
          centos_7_image: { get_param: centos_7_image }
          fedora_21_image: { get_param: fedora_21_image }
          public_net: { get_param: public_net }
          central_router_id: { get_resource: central_router }

outputs:
  master_network_id:
    description: ID of the master network
    value: { get_resource: master_network }
  master_instance_ip:
    description: IP address of the master Ubuntu instance
    value: { get_attr: [master_instance, first_address] }
  environment_attributes:
    description: A map of resource names to the specified attribute of each individual environment
    value: { get_attr: [ environments, attributes ] }
  environment_refs:
    description: A list of resource IDs for the environments in the group
    value: { get_attr: [ environments, refs ] }
